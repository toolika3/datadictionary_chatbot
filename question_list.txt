1. List top 20 column names associated with UPB. Please include table that the columns originally belongs to. Dont use DSET ID in lieu of table . Include duplicates and look across all tables in the knowledgebase


import pandas as pd
import matplotlib.pyplot as plt

# --- User Inputs ---
input_file = "input.csv"
column_asset = "Asset ID"
percent_threshold = 5  # Show only assets with >= 5% of total

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Keep only rows where Asset ID is not blank ---
df = df[df[column_asset].notna() & (df[column_asset].astype(str).str.strip() != "")]

# --- Count occurrences per Asset ID ---
asset_counts = df[column_asset].value_counts()

# --- Calculate percentage ---
asset_percent = (asset_counts / asset_counts.sum()) * 100

# --- Combine into one DataFrame ---
summary_df = pd.DataFrame({
    "Count": asset_counts,
    "Percent": asset_percent
})

# --- Filter by threshold ---
summary_df = summary_df[summary_df["Percent"] >= percent_threshold]

# --- Sort for better visualization ---
summary_df = summary_df.sort_values("Percent", ascending=False)

# --- Plot combined chart ---
fig, ax1 = plt.subplots(figsize=(10, 6))

# Bar chart for counts
ax1.bar(summary_df.index.astype(str), summary_df["Count"], alpha=0.7)
ax1.set_xlabel("Asset ID")
ax1.set_ylabel("Count")
ax1.tick_params(axis='x', rotation=45)

# Secondary y-axis for percent
ax2 = ax1.twinx()
ax2.plot(summary_df.index.astype(str), summary_df["Percent"], color='red', marker='o')
ax2.set_ylabel("Percent (%)")

plt.title(f"Assets with >= {percent_threshold}% of Total")
plt.tight_layout()
plt.show()

## Reassignment count
import pandas as pd
import matplotlib.pyplot as plt

# --- User Inputs ---
input_file = "input.csv"
column_reassign = "Reassignment count"
percent_threshold = 1  # Show only values >= 1% of total

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Keep only rows where Reassignment Count > 0 ---
df = df[df[column_reassign].notna() & (df[column_reassign] > 0)]

# --- Count occurrences per Reassignment Count ---
reassign_counts = df[column_reassign].value_counts().sort_index()

# --- Calculate percentage ---
reassign_percent = (reassign_counts / reassign_counts.sum()) * 100

# --- Combine into one DataFrame ---
summary_df = pd.DataFrame({
    "Count": reassign_counts,
    "Percent": reassign_percent
})

# --- Filter by threshold ---
summary_df = summary_df[summary_df["Percent"] >= percent_threshold]

# --- Plot combined chart ---
fig, ax1 = plt.subplots(figsize=(10, 6))

# Bar chart for counts
bars = ax1.bar(summary_df.index.astype(str), summary_df["Count"], alpha=0.7)
ax1.set_xlabel("Reassignment Count")
ax1.set_ylabel("Number of Records")
ax1.tick_params(axis='x', rotation=45)

# Add numbers on top of bars
for bar in bars:
    height = bar.get_height()
    ax1.text(bar.get_x() + bar.get_width()/2, height, f"{int(height)}", 
             ha='center', va='bottom', fontsize=9, color='black')

# Secondary y-axis for percent
ax2 = ax1.twinx()
ax2.plot(summary_df.index.astype(str), summary_df["Percent"], color='red', marker='o')
ax2.set_ylabel("Percent (%)")

# Add percent labels at red points
for i, (x, y) in enumerate(zip(summary_df.index.astype(str), summary_df["Percent"])):
    ax2.text(i, y, f"{y:.1f}%", color='red', fontsize=9, ha='center', va='bottom')

plt.title(f"Records by Reassignment Count (>= {percent_threshold}% of Total)")
plt.tight_layout()
plt.show()


# Create root cause reason using reassignment and escalation reason columns

import pandas as pd
import matplotlib.pyplot as plt
import textwrap

# --- User Inputs ---
input_file = "input.csv"
reassign_col = "Reassignment count"
reason1_col = "Reassignment reason"
reason2_col = "Escalation reason"
new_reason_col = "root cause reason"
valid_counts = [1, 2, 4]
wrap_width = 30  # characters per line for wrapped labels

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Filter rows with specific Reassignment count ---
df = df[df[reassign_col].isin(valid_counts)]

# --- Create 'root cause reason' column (correct logic) ---
df[new_reason_col] = df.apply(
    lambda x: x[reason1_col] if pd.notna(x[reason1_col]) and x[reason1_col] != '' 
    else x[reason2_col],
    axis=1
)

# --- Count occurrences per root cause reason ---
reason_counts = df[new_reason_col].value_counts()
reason_percent = (reason_counts / reason_counts.sum()) * 100

# --- Combine into DataFrame ---
summary_df = pd.DataFrame({
    "Count": reason_counts,
    "Percent": reason_percent
})

# --- Sort descending ---
summary_df = summary_df.sort_values("Count", ascending=False)

# --- Wrap long labels ---
summary_df.index = [textwrap.fill(label, wrap_width) for label in summary_df.index]

# --- Plot horizontal bar chart ---
fig, ax1 = plt.subplots(figsize=(10, 8))

# Horizontal bars for counts
bars = ax1.barh(summary_df.index, summary_df["Count"], color='skyblue')
ax1.set_xlabel("Number of Records")
ax1.set_ylabel("Root Cause Reason")

# Add count labels on bars
for bar in bars:
    width = bar.get_width()
    ax1.text(width + 1, bar.get_y() + bar.get_height()/2, f"{int(width)}",
             ha='left', va='center', fontsize=9, color='black')

# Secondary axis for percent
ax2 = ax1.twiny()
ax2.plot(summary_df["Percent"], summary_df.index, color='red', marker='o')
ax2.set_xlabel("Percent (%)")

# Add percent labels at red points
for i, (y, p) in enumerate(zip(summary_df.index, summary_df["Percent"])):
    ax2.text(p + 0.5, i, f"{p:.1f}%", color='red', fontsize=9, va='center')

plt.title("Root Cause Reasons (Reassignment Count = 1, 2, or 4)")
plt.tight_layout()
plt.show()
