1. List top 20 column names associated with UPB. Please include table that the columns originally belongs to. Dont use DSET ID in lieu of table . Include duplicates and look across all tables in the knowledgebase


import pandas as pd
import matplotlib.pyplot as plt

# --- User Inputs ---
input_file = "input.csv"
column_asset = "Asset ID"
percent_threshold = 5  # Show only assets with >= 5% of total

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Keep only rows where Asset ID is not blank ---
df = df[df[column_asset].notna() & (df[column_asset].astype(str).str.strip() != "")]

# --- Count occurrences per Asset ID ---
asset_counts = df[column_asset].value_counts()

# --- Calculate percentage ---
asset_percent = (asset_counts / asset_counts.sum()) * 100

# --- Combine into one DataFrame ---
summary_df = pd.DataFrame({
    "Count": asset_counts,
    "Percent": asset_percent
})

# --- Filter by threshold ---
summary_df = summary_df[summary_df["Percent"] >= percent_threshold]

# --- Sort for better visualization ---
summary_df = summary_df.sort_values("Percent", ascending=False)

# --- Plot combined chart ---
fig, ax1 = plt.subplots(figsize=(10, 6))

# Bar chart for counts
ax1.bar(summary_df.index.astype(str), summary_df["Count"], alpha=0.7)
ax1.set_xlabel("Asset ID")
ax1.set_ylabel("Count")
ax1.tick_params(axis='x', rotation=45)

# Secondary y-axis for percent
ax2 = ax1.twinx()
ax2.plot(summary_df.index.astype(str), summary_df["Percent"], color='red', marker='o')
ax2.set_ylabel("Percent (%)")

plt.title(f"Assets with >= {percent_threshold}% of Total")
plt.tight_layout()
plt.show()

## Reassignment count
import pandas as pd
import matplotlib.pyplot as plt

# --- User Inputs ---
input_file = "input.csv"
column_reassign = "Reassignment count"
percent_threshold = 1  # Show only values >= 1% of total

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Keep only rows where Reassignment Count > 0 ---
df = df[df[column_reassign].notna() & (df[column_reassign] > 0)]

# --- Count occurrences per Reassignment Count ---
reassign_counts = df[column_reassign].value_counts().sort_index()

# --- Calculate percentage ---
reassign_percent = (reassign_counts / reassign_counts.sum()) * 100

# --- Combine into one DataFrame ---
summary_df = pd.DataFrame({
    "Count": reassign_counts,
    "Percent": reassign_percent
})

# --- Filter by threshold ---
summary_df = summary_df[summary_df["Percent"] >= percent_threshold]

# --- Plot combined chart ---
fig, ax1 = plt.subplots(figsize=(10, 6))

# Bar chart for counts
bars = ax1.bar(summary_df.index.astype(str), summary_df["Count"], alpha=0.7)
ax1.set_xlabel("Reassignment Count")
ax1.set_ylabel("Number of Records")
ax1.tick_params(axis='x', rotation=45)

# Add numbers on top of bars
for bar in bars:
    height = bar.get_height()
    ax1.text(bar.get_x() + bar.get_width()/2, height, f"{int(height)}", 
             ha='center', va='bottom', fontsize=9, color='black')

# Secondary y-axis for percent
ax2 = ax1.twinx()
ax2.plot(summary_df.index.astype(str), summary_df["Percent"], color='red', marker='o')
ax2.set_ylabel("Percent (%)")

# Add percent labels at red points
for i, (x, y) in enumerate(zip(summary_df.index.astype(str), summary_df["Percent"])):
    ax2.text(i, y, f"{y:.1f}%", color='red', fontsize=9, ha='center', va='bottom')

plt.title(f"Records by Reassignment Count (>= {percent_threshold}% of Total)")
plt.tight_layout()
plt.show()


# Create root cause reason using reassignment and escalation reason columns

import pandas as pd
import matplotlib.pyplot as plt
import textwrap

# --- User Inputs ---
input_file = "input.csv"
reassign_col = "Reassignment count"
reason1_col = "Reassignment reason"
reason2_col = "Escalation reason"
new_reason_col = "root cause reason"
valid_counts = [1, 2, 4]
wrap_width = 30

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Filter rows ---
df = df[df[reassign_col].isin(valid_counts)]

# --- Create root cause reason ---
df[new_reason_col] = df.apply(
    lambda x: x[reason1_col] if pd.notna(x[reason1_col]) and x[reason1_col] != '' 
    else x[reason2_col],
    axis=1
)

# --- Count & Percent ---
reason_counts = df[new_reason_col].value_counts()
reason_percent = (reason_counts / reason_counts.sum()) * 100

summary_df = pd.DataFrame({
    "Count": reason_counts,
    "Percent": reason_percent
}).sort_values("Count", ascending=False)

# --- Wrap labels ---
summary_df.index = [textwrap.fill(label, wrap_width) for label in summary_df.index]

# --- Plot ---
fig, ax = plt.subplots(figsize=(12, 8))
bars = ax.barh(summary_df.index, summary_df["Count"], color='skyblue')
ax.set_xlabel("Number of Records")
ax.set_ylabel("Root Cause Reason")

# Place count labels INSIDE bars
for bar in bars:
    width = bar.get_width()
    ax.text(width - (width * 0.02), bar.get_y() + bar.get_height()/2,
            f"{int(width)}", ha='right', va='center', fontsize=9, color='black')

# Place percent labels OUTSIDE bars to the right
for i, (count, percent) in enumerate(zip(summary_df["Count"], summary_df["Percent"])):
    ax.text(count + (summary_df["Count"].max() * 0.02),
            i, f"{percent:.1f}%", color='red', fontsize=9, va='center', ha='left')

plt.title("Root Cause Reasons (Reassignment Count = 1, 2, or 4)")
plt.tight_layout()
plt.show()


### Assignment group detail with significantly high value

import pandas as pd
import matplotlib.pyplot as plt
import textwrap

# --- User Inputs ---
input_file = "input.csv"
column_group = "Assignment Group Detail"
percent_threshold = 5  # Only show groups >= 5% of total
wrap_width = 30        # Wrap long labels

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Filter non-blank values ---
df = df[df[column_group].notna() & (df[column_group].astype(str).str.strip() != "")]

# --- Count occurrences ---
group_counts = df[column_group].value_counts()
group_percent = (group_counts / group_counts.sum()) * 100

# --- Combine into DataFrame ---
summary_df = pd.DataFrame({
    "Count": group_counts,
    "Percent": group_percent
})

# --- Keep only significant groups ---
summary_df = summary_df[summary_df["Percent"] >= percent_threshold].sort_values("Count", ascending=False)

# --- Wrap labels ---
summary_df.index = [textwrap.fill(label, wrap_width) for label in summary_df.index]

# --- Plot horizontal bar chart ---
fig, ax = plt.subplots(figsize=(12, 8))
bars = ax.barh(summary_df.index, summary_df["Count"], color='skyblue')
ax.set_xlabel("Number of Records")
ax.set_ylabel("Assignment Group Detail")

# Counts inside bars
for bar in bars:
    width = bar.get_width()
    ax.text(width - (width*0.02), bar.get_y() + bar.get_height()/2,
            f"{int(width)}", ha='right', va='center', fontsize=9, color='black')

# Percent outside bars
for i, (count, percent) in enumerate(zip(summary_df["Count"], summary_df["Percent"])):
    ax.text(count + (summary_df["Count"].max() * 0.02),
            i, f"{percent:.1f}%", color='red', fontsize=9, va='center', ha='left')

plt.title(f"Significant Assignment Groups (>= {percent_threshold}% of total)")
plt.tight_layout()
plt.show()

## Resolution time per quarter
import pandas as pd
import matplotlib.pyplot as plt
from dateutil import parser

# --- User Inputs ---
input_file = "input.csv"
date_col = "Resolved date"
time_col = "Resolve time"  # in seconds

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Safe date parsing ---
df[date_col] = df[date_col].astype(str).str.strip()
df[date_col] = df[date_col].apply(lambda x: parser.parse(x, dayfirst=False) if x else pd.NaT)
df = df.dropna(subset=[date_col])

# --- Convert resolve time to numeric minutes ---
df[time_col] = pd.to_numeric(df[time_col], errors='coerce')
df = df.dropna(subset=[time_col])
df["Resolve Minutes"] = df[time_col] / 60  # convert seconds â†’ minutes

# --- Extract quarter ---
df["Quarter"] = df[date_col].dt.to_period("Q")

# --- Average resolve minutes per quarter ---
avg_resolve = df.groupby("Quarter")["Resolve Minutes"].mean().reset_index()

# --- Plot ---
fig, ax = plt.subplots(figsize=(10, 6))
x_labels = avg_resolve["Quarter"].astype(str)
y_values = avg_resolve["Resolve Minutes"]

line = ax.plot(x_labels, y_values, marker='o', color='blue', linewidth=2)

# Annotate each point
for x, y in zip(x_labels, y_values):
    ax.annotate(f"{y:.1f}", xy=(x, y), xytext=(0, 5), textcoords='offset points',
                ha='center', va='bottom', fontsize=9, color='blue')

ax.set_xlabel("Quarter")
ax.set_ylabel("Average Resolve Time (Minutes)")
ax.set_title("Average Resolution Time per Quarter")
ax.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


















# Knowledge Solution

import pandas as pd
import matplotlib.pyplot as plt
import textwrap

# --- User Inputs ---
input_file = "input.csv"
column_ks = "Knowledge solution"
percent_threshold = 5  # Only show categories >= 5% of total
wrap_width = 30

# --- Read CSV ---
df = pd.read_csv(input_file)

# --- Total records ---
total_records = len(df)

# --- Keep only non-blank Knowledge solution rows ---
df_nonblank = df[df[column_ks].notna() & (df[column_ks].astype(str).str.strip() != "")]
nonblank_records = len(df_nonblank)

# --- Percentage of total where Knowledge solution is not blank ---
percent_nonblank = (nonblank_records / total_records) * 100

# --- Count occurrences per Knowledge solution ---
ks_counts = df_nonblank[column_ks].value_counts()
ks_percent = (ks_counts / total_records) * 100  # Percent of total records

# --- Combine into DataFrame ---
summary_df = pd.DataFrame({
    "Count": ks_counts,
    "Percent": ks_percent
})

# --- Keep only significant categories ---
summary_df = summary_df[summary_df["Percent"] >= percent_threshold].sort_values("Count", ascending=False)

# --- Wrap long labels ---
summary_df.index = [textwrap.fill(label, wrap_width) for label in summary_df.index]

# --- Plot horizontal bar chart ---
fig, ax = plt.subplots(figsize=(12, 8))
bars = ax.barh(summary_df.index, summary_df["Count"], color='skyblue')
ax.set_xlabel("Number of Records")
ax.set_ylabel("Knowledge Solution")

# Add count labels inside bars
for bar in bars:
    width = bar.get_width()
    ax.text(width - (width*0.02), bar.get_y() + bar.get_height()/2,
            f"{int(width)}", ha='right', va='center', fontsize=9, color='black')

# Add percent labels outside bars
for i, (count, percent) in enumerate(zip(summary_df["Count"], summary_df["Percent"])):
    ax.text(count + (summary_df["Count"].max()*0.02),
            i, f"{percent:.1f}%", color='red', fontsize=9, va='center', ha='left')

# --- Add statement on top ---
plt.text(0.5, 1.05, f"Percentage of total records where '{column_ks}' is not blank: {percent_nonblank:.1f}%",
         ha='center', va='bottom', transform=ax.transAxes, fontsize=12, fontweight='bold')

plt.title(f"Significant '{column_ks}' Values (>= {percent_threshold}% of total)")
plt.tight_layout()
plt.show()


# KA usage by Reassignment count
import pandas as pd
import matplotlib.pyplot as plt

def plot_knowledge_distribution(csv_path, reassignment_col="Reassignment count", 
                                knowledge_col="Knowledge name", top_n=10):
    # Load CSV
    df = pd.read_csv(csv_path)

 # Filter rows where reassignment count == 1
    df_filtered = df[df[reassignment_col] == 1].copy()

    # Replace blank Knowledge name with "No KA used"
    df_filtered[knowledge_col] = df_filtered[knowledge_col].fillna("").replace("", "No KA used")

    # Count frequency and sort descending to get top N
    knowledge_counts = df_filtered[knowledge_col].value_counts(ascending=False)
    knowledge_percent = (knowledge_counts / knowledge_counts.sum()) * 100

    # Limit to top N categories
    if top_n:
        knowledge_counts = knowledge_counts.head(top_n)
        knowledge_percent = knowledge_percent.head(top_n)

    # Sort ascending for better visualization
    knowledge_counts = knowledge_counts.sort_values(ascending=True)
    knowledge_percent = knowledge_percent.loc[knowledge_counts.index]

    # Wrap labels
    wrapped_labels = [textwrap.fill(label, wrap_width) for label in knowledge_counts.index]

    # Plot horizontal bar chart
    plt.figure(figsize=(12, 6))
    bars = plt.barh(wrapped_labels, knowledge_counts.values, color='skyblue')

    plt.xlabel('Number of Tickets')
    plt.ylabel('Knowledge Name')
    plt.title(f'Knowledge Name Distribution (Top {top_n}, Reassignment Count = 1)')

    # Add count and percent labels
    for idx, (value, percent) in enumerate(zip(knowledge_counts.values, knowledge_percent.values)):
        plt.text(value + 0.5, idx, f'{value} ({percent:.1f}%)', va='center', fontsize=8)

    plt.tight_layout()
    plt.subplots_adjust(left=0.35, right=0.95)
    plt.show()




import pandas as pd

def summarize_resolve_time(csv_path, date_col="Created", time_col="resolve_time"):
    # Load data
    df = pd.read_csv(csv_path)

    # Ensure datetime conversion
    df[date_col] = pd.to_datetime(df[date_col], errors='coerce')

    # Drop rows with invalid dates or missing resolve_time
    df = df.dropna(subset=[date_col, time_col])

    # Ensure numeric resolve time
    df[time_col] = pd.to_numeric(df[time_col], errors='coerce')

    # Create Quarter column
    df['Quarter'] = df[date_col].dt.to_period('Q')

    # Group by quarter and get min, max, mean, count
    summary = df.groupby('Quarter')[time_col].agg(['min', 'max', 'mean', 'count']).reset_index()

    # Create buckets (2-3 based on min/max ranges)
    def bucket(value, q_min, q_max):
        # Divide into 3 buckets: Low, Medium, High
        range_size = (q_max - q_min) / 3
        if value <= q_min + range_size:
            return "Low"
        elif value <= q_min + 2 * range_size:
            return "Medium"
        else:
            return "High"

    df['Bucket'] = df.groupby('Quarter')[time_col].transform(
        lambda x: [bucket(v, x.min(), x.max()) for v in x]
    )

    # Bucket summary: count per bucket and avg resolve time per quarter
    bucket_summary = df.groupby(['Quarter', 'Bucket'])[time_col].agg(['count', 'mean']).reset_index()

    return summary, bucket_summary

# Example usage
# summary_stats, bucket_stats = summarize_resolve_time("tickets.csv")
# print(summary_stats)
# print(bucket_stats)

import pandas as pd
import matplotlib.pyplot as plt
import textwrap

def plot_knowledge_for_project_creation(csv_path,
                                        category_col="category",
                                        knowledge_col="Knowledge name",
                                        filter_value="Project Creation Request",
                                        wrap_width=20):
    # Load CSV
    df = pd.read_csv(csv_path)

    # Filter for specific category
    df_filtered = df[df[category_col] == filter_value].copy()

    # Handle blanks in Knowledge name
    df_filtered[knowledge_col] = df_filtered[knowledge_col].fillna("").replace("", "No KA used")

    # Count and percentage
    knowledge_counts = df_filtered[knowledge_col].value_counts()
    knowledge_percent = (knowledge_counts / knowledge_counts.sum()) * 100

    # Wrap long labels
    wrapped_labels = [textwrap.fill(label, wrap_width) for label in knowledge_counts.index]

    # Plot
    plt.figure(figsize=(12, 6))
    bars = plt.barh(wrapped_labels, knowledge_counts.values, color='skyblue')

    plt.xlabel('Number of Tickets')
    plt.ylabel('Knowledge Name')
    plt.title(f'Knowledge Name Distribution for {filter_value}')

    # Add labels (count and percent)
    for idx, (value, percent) in enumerate(zip(knowledge_counts.values, knowledge_percent.values)):
        plt.text(value + 0.5, idx, f'{value} ({percent:.1f}%)', va='center', fontsize=8)

    plt.tight_layout()
    plt.subplots_adjust(left=0.35, right=0.95)
    plt.show()

# Example usage:
# plot_knowledge_for_project_creation("tickets.csv")
